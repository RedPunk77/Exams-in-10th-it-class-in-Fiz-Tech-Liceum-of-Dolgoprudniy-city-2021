#10_it.pro:
#3)
"""3. (4) Программа. У некоторого исполнителя, обрабатывающего числа, есть три команды: +1, +2, ∗3.
Первая команда прибавляет к числу единицу, вторая — двойку, третья – умножает на три. Исполнитель
получает на вход некоторое число и программу, представляющую собой некоторую последовательность
вышеназванных команд. На выходе он выдаёт новое число — результат применения программы к исходному числу.
Вам предлагается написать программу — анализатор данного исполнителя. На вход
вашей программе подаются три числа: n, x и y, каждое из которых лежит в диапазоне от 0 до 200
(включая границы) и при этом гарантируется, что 0 < x, y < n, x <= y. Ваша программа должна подсчитать,
сколько возможно построить различных программ для исполнителя, которые преобразуют число
1 в число n, и при этом траектория вычислений содержит число x и не содержит числа y. В качестве
ответа нужно вывести одно целое число. Траекторией вычислений называется последовательность чисел,
получающаяся в результате последовательного применения команд. Укажите используемый язык программирования."""


def f(start, a, y):                        #start - начальное значение, a - текущее значение, y - запретное число
    if a == y or a < start:
        return 0
    elif a == start:
        return 1
    else:
        return f(start + 1, a, y) + f(start + 2, a, y) + f(start * 3, a, y)


n = int(input())
x = int(input())
y = int(input())
print(f(1, x, y) * f(x, n, y))
#3)
"""4. (4) Программа. На вход программе подаётся последовательность тринадцатеричных чисел. Между
соседними числами — запятая, за последним — точка. Общее количество чисел неизвестно. При этом
в некоторых числах допущены ошибки (например, используется буква W). Найдите количество корректно
введённых чисел, которые при этом являются чётными. Массивы и строки не использовать.
Укажите используемый язык программирования."""
#кол-во нечётных должно быть нечётно
"""s = input()
k = 0
f = 0
special_counter = 0
while s != '.':
    if not(('0' <= s <= '9') or ('A' <= s <= 'C')):
        f = True
    if s in '13579B':
        special_counter += 1
    s = input()
    if s == ',' or s == '.':
        if f and (special_counter % 2 == 0):
            k += 1
    if s == ',':
        special_counter = 0
        f = 0
        s = input()
print(k)"""
#5)
"""5. (4) Программа. Требуется вывести на экран все последовательности длины n, которые состоят из
десятичных цифр, и в которых нет двух и более двоек (всего), и нет трёх и более девяток подряд.
Напишите функцию или процедуру, на вход которой подаётся число n, и она решает данную задачу.
Укажите используемый язык программирования."""
from itertools import product


def digits(n):
    s = "0123456789"
    for x in product(s, repeat=n):
        A = "".join(x)
        if "22" not in A and "999" not in A:
            print(A)


k = int(input())
digits(k)

#6)
"""6. (4) Программа. На вход программе подаются тройки натуральных чисел. Все числа не превосходят
30000. Признак конца ввода — тройка нулей. Необходимо распределить все числа на три группы, при
этом в каждую группу должно попасть ровно одно число из каждой исходной тройки. Сумма всех
чисел в первой группе должна быть чётной, во второй — нечётной. Программа должна определить
максимально возможную сумму чисел в третьей группе. Полный балл за задачу выставляется только
в случае корректного решения, имеющего линейную сложность по времени и константную по памяти."""
""""""
a, b, c = map(int, input().split())
s1 = s2 = s3 = 0
min_dif = 30001
while a != 0 and b != 0 and c != 0:
    a, b, c = sorted([a, b, c])
    s1 += a
    s2 += b
    s3 += c
    if (c - a) % 2 == 1:
        min_dif = min(min_dif, c - a)
    if (c - b) % 2 == 1:
        min_dif = min(min_dif, c - b)
    a, b, c = map(int, input().split())
if (s1 % 2) != (s2 % 2):
    print(s3)
else:
    print(s3 - min_dif)
